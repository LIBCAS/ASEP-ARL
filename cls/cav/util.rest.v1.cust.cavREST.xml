<?xml version="1.0" encoding="UTF-8"?>
<Export generator="IRIS" version="26" zv="IRIS for Windows (x86-64) 2023.1.2 (Build 450U)" ts="2024-02-16 10:31:56">
<Class name="util.rest.v1.cust.cavREST">
<Description><![CDATA[
<pre>
Sluzby REST API pro CAV
 autorizace musi probehnout v kontextu cav:
   https://cosmo2/arl/api/v1/cav/auth
 provolani API:
   https://cosmo2/arl/api/v1/cust/cav/ping

</pre>]]></Description>
<IncludeCode>Common</IncludeCode>
<Super>%CSP.REST</Super>
<TimeChanged>66886,37894.3816508</TimeChanged>
<TimeCreated>66884,34642.9487152</TimeCreated>

<Parameter name="HandleCorsRequest">
<Default>1</Default>
</Parameter>

<Parameter name="CONTENTTYPE">
<Default>application/json</Default>
</Parameter>

<Parameter name="CHARSET">
<Default>utf-8</Default>
</Parameter>

<Parameter name="CONVERTINPUTSTREAM">
<Default>1</Default>
</Parameter>

<Parameter name="ICTX">
<Default>cav</Default>
</Parameter>

<XData name="UrlMap">
<XMLNamespace>http://www.cosmotron.cz/urlmap</XMLNamespace>
<Data><![CDATA[
<Routes>
<Route Url="/ping" Method="GET" Call="ping"/>
</Routes>
]]></Data>
</XData>

<Method name="OnHandleCorsRequest">
<Description><![CDATA[
<pre> CORS request handler
</pre>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>url:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[  q ##class(util.rest.v1.utils).handleCorsRequest(url)
]]></Implementation>
</Method>

<Method name="ping">
<Description><![CDATA[
<pre> Ukazkova metoda
</pre>]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
 s ictx=..#ICTX
 s ipref=$zcvt(ictx,"W")
 s untablesd=ipref_"UnTablesd"
 s service="cav_ping" ; COMMAND_GROUPS_API 200$c...;cav_ping;... 
 s cmJson=""
  
 s ret=##class(util.rest.v1.utils).checkToken(ictx,.userName) 
 d ##class(util.rest.v1.utils).prepare(ictx,userName,.env)
 q:ret'="" $$$OK
 
 ; kontrola prav na sluzbu
 s cmdApiGrp=##class(util.rest.v1.utils).checkRights(.env,userName,service,"w")
 q:cmdApiGrp="" $$$OK
 
 s err=##class(util.rest.v1.utils).openLogFile(.env,cmdApiGrp,service,.lsLogFile)
 q:err'="" $$$OK

 try {
   w !,"Params:"
   //w !," ictx:      "_ictx
   //w !," class:     "_class
   //w !," t001:      "_t001
   
   
   
   s cm = {
     "state": ("ping"),
     "message": ("ping")
   }
   
   s cmJson=cm.%ToJSON()
   w !,"RESPONSE:",!,cmJson
   
   d ##class(util.rest.v1.utils).closeLogFile(.env,lsLogFile)
 }
 catch exp {
   if $zcvt(lsLogFile,"L")=$IO {
     s err=exp.Name_exp.Location_", "_$SYSTEM.Status.Error(exp.Code,exp.Data)   
     w !,"ERROR:",!,err
     d ##class(util.rest.v1.utils).closeLogFile(.env,lsLogFile)
   }
   throw exp
 }
 
 w cmJson
 q $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
